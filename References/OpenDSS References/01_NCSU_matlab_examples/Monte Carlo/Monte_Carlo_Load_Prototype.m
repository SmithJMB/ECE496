%********************************%
%      Monte Carlo Prototype     %
%********************************%

%This  script is meantto find a hosting capacity through through iterative
%Monte Carlo Simulation.

%Setup the COM server
[DSSCircObj, DSSText, gridpvPath] = DSSStartup;

%Compile the circuit
DSSText.command = 'compile C:\Users\dotso_000\Documents\OpenDSS\HollySprings_Circuit_Opendss\Run_Master_Allocate.DSS';

DSSText.command = 'solve'; 

%Setup a pointer fo the active circuit
DSSCircuit = DSSCircObj.ActiveCircuit;

%Bus Information
Buses = getBusInfo(DSSCircObj);

%Load Information
Loads = getLoadInfo(DSSCircObj);

%Prepare all input curves for PV
DSSText.command = 'New XYCurve.MyPvsT npts=4 xarray=[0 25 75 100] yarray=[1.2 1.0 0.8 0.6]';
DSSText.command = 'New XYCurve.MyEff npts=4 xarray=[.1 .2 .4 1.0] yarray=[.86 .9 .93 .97]';
DSSText.command = 'New Loadshape.MyIrrad npts=24 interval=1 mult=[0 0 0 0 0 0 .1 .2 .3 .5 .8 .9 1.0 1.0 .99 .9 .7 .4 .1 0 0 0 0 0]';
DSSText.command = 'New Tshape.MyTemp npts=24 interval=1 temp=[25, 25, 25, 25, 25, 25, 25, 25, 35, 40, 45, 50 60 60 55 40 35 30 25 25 25 25 25 25]';

%Monte Carlo method************************
%   1. Start with an initial size of PV
%   2. Run at different circuit locations using Monte Carlo
%   3. Check for violations
%   4. Increase size of PV and iterate

%Initialize PV Size

PV_kW = 20;

%Debugging tools**************************

%Initialize cell array to hold a list of DSS.Commands generated by the code
%and a list of buses selected to host PV
DSS_CoM = cell(length(Buses), 2);

%Initialize counter variable to count the number of PV generators installed
Count_PV = 0;

previousBusName = '';
%For all buses
for i=1:length(Loads);
    %Select the bus
    activeBusName = regexprep({Loads(i).busName},'(\.[0-9]+)','');
    %Generate a random number between 0 and 1
    if not(strcmp(activeBusName, previousBusName))
        
        Monte_Carlo_Random = rand;
        if (Monte_Carlo_Random > 0.5)
    
            %Prepare all data to be entered into OpenDSS Command
            Active_Load = Loads(i);
            Active_Load_phases = num2str(Active_Load.numPhases);
            Active_Load_voltage = num2str(Active_Load.kV);
            Active_Load_kw = num2str(PV_kW);
    

            %Preparing the DSS Command
            DSS_Command = sprintf('New PVSystem.%s_PV phases=%s bus1=%s kV=%s kVA=%s irrad=0.8 Pmpp=500 temperature=25 PF=1 effcurve=MyEff P-TCurve=MyPvsT Daily=MyIrrad TDaily=MyTemp',Active_Load.name,Active_Load_phases,Active_Load.name,Active_Load_voltage, Active_Load_kw);

            DSS_CoM{i,1} = DSS_Command;
            DSS_CoM{i,2} = Active_Load.name;
            Count_PV = Count_PV + 1;
            % Add PV in the form of a 'PVSystem' object
            DSSText.command = DSS_Command;

        end
        previousBusName = activeBusName;
    end
end
DSSText.command = 'solve';    
%Display information about the solar panels placed on the circuit
PV = getPVInfo(DSSCircObj);

%plotCircuitLinesOptions(DSSCircObj);